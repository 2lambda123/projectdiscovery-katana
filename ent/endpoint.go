// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/projectdiscovery/katana/ent/endpoint"
)

// Endpoint is the model entity for the Endpoint schema.
type Endpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Headers holds the value of the "headers" field.
	Headers map[string]string `json:"headers,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EndpointQuery when eager-loading is set.
	Edges EndpointEdges `json:"edges"`
}

// EndpointEdges holds the relations/edges for other nodes in the graph.
type EndpointEdges struct {
	// Links holds the value of the links edge.
	Links []*Endpoint `json:"links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LinksOrErr returns the Links value or an error if the edge
// was not loaded in eager-loading.
func (e EndpointEdges) LinksOrErr() ([]*Endpoint, error) {
	if e.loadedTypes[0] {
		return e.Links, nil
	}
	return nil, &NotLoadedError{edge: "links"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Endpoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldHeaders:
			values[i] = new([]byte)
		case endpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case endpoint.FieldURL, endpoint.FieldMethod, endpoint.FieldBody, endpoint.FieldSource:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Endpoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Endpoint fields.
func (e *Endpoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case endpoint.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				e.URL = value.String
			}
		case endpoint.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				e.Method = value.String
			}
		case endpoint.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				e.Body = value.String
			}
		case endpoint.FieldHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Headers); err != nil {
					return fmt.Errorf("unmarshal field headers: %w", err)
				}
			}
		case endpoint.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				e.Source = value.String
			}
		}
	}
	return nil
}

// QueryLinks queries the "links" edge of the Endpoint entity.
func (e *Endpoint) QueryLinks() *EndpointQuery {
	return (&EndpointClient{config: e.config}).QueryLinks(e)
}

// Update returns a builder for updating this Endpoint.
// Note that you need to call Endpoint.Unwrap() before calling this method if this Endpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Endpoint) Update() *EndpointUpdateOne {
	return (&EndpointClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Endpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Endpoint) Unwrap() *Endpoint {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Endpoint is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Endpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Endpoint(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", url=")
	builder.WriteString(e.URL)
	builder.WriteString(", method=")
	builder.WriteString(e.Method)
	builder.WriteString(", body=")
	builder.WriteString(e.Body)
	builder.WriteString(", headers=")
	builder.WriteString(fmt.Sprintf("%v", e.Headers))
	builder.WriteString(", source=")
	builder.WriteString(e.Source)
	builder.WriteByte(')')
	return builder.String()
}

// Endpoints is a parsable slice of Endpoint.
type Endpoints []*Endpoint

func (e Endpoints) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
